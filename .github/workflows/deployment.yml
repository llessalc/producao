name: Deploy Actions
on:
  push:

jobs:
  unit-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar o JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Executar testes unitários
        run: |
          export DB_URL="${{ secrets.DB_URL }}"
          mvn test

      - name: Generate JaCoco Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2.0.1

      - name: Log coverage percentage
        run:
          echo "coverage = ${{ steps.jacoco.ouputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco/


  integration-test:
    runs-on: ubuntu-latest
    needs: unit-test

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Instalar MongoDB e adicionar collection
        run: |
          docker pull mongodb/mongodb-community-server
          docker run --name mongo -p 27017:27017 -d mongodb/mongodb-community-server:latest
          sleep 15 # Aguardar 15 segundos para o MongoDB iniciar completamente

      - name: Criar Collection
        run: docker exec mongo bash -c 'echo "use producao" | mongosh && echo "db.createCollection(\"pedidos\")" | mongosh'

      - name: Configurar o JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Iniciar aplicação Spring
        run: |
          export DB_URL="${{ secrets.DB_URL }}"
          mvn spring-boot:run &

      - name: Esperar inicialização da aplicação
        run: sleep 60 # Aguardar 60 segundos para a aplicação Spring iniciar completamente

      - name: Executar testes de integração
        run: mvn test -P integration-test

      - name: Generate JaCoco Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2.0.1

      - name: Log coverage percentage
        run:
          echo "coverage = ${{ steps.jacoco.ouputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco/

  system-test:
    runs-on: ubuntu-latest
    needs: integration-test

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Instalar MongoDB e adicionar collection
        run: |
          docker pull mongodb/mongodb-community-server
          docker run --name mongo -p 27017:27017 -d mongodb/mongodb-community-server:latest
          sleep 15 # Aguardar 15 segundos para o MongoDB iniciar completamente

      - name: Criar Collection
        run: docker exec mongo bash -c 'echo "use producao" | mongosh && echo "db.createCollection(\"pedidos\")" | mongosh'

      - name: Configurar o JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Iniciar aplicação Spring
        run: |
          export DB_URL="${{ secrets.DB_URL }}"
          mvn spring-boot:run &

      - name: Esperar inicialização da aplicação
        run: sleep 60 # Aguardar 60 segundos para a aplicação Spring iniciar completamente

      - name: Executar testes BDD
        run: mvn test -P system-test

      - name: Generate JaCoco Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2.0.1

      - name: Log coverage percentage
        run:
          echo "coverage = ${{ steps.jacoco.ouputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco/
  build:
    runs-on: ubuntu-latest
    needs: system-test


    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Instalar MongoDB
        run: |
          docker pull mongodb/mongodb-community-server
          docker run --name mongo -p 27017:27017 -d mongodb/mongodb-community-server:latest
          sleep 15 # Aguardar 15 segundos para o MongoDB iniciar completamente

      - name: Configurar o JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
          package: '*.jar'

      - name: Build com Maven
        run: |
          export DB_URL="${{ secrets.DB_URL }}"
          mvn package


  publish:
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
      - name: Instalar MongoDB
        run: |
          docker pull mongodb/mongodb-community-server
          docker run --name mongo -p 27017:27017 -d mongodb/mongodb-community-server:latest
          sleep 15 # Aguardar 15 segundos para o MongoDB iniciar completamente
      - name: Configurar o JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
          package: '*.jar'
      - name: Publish package
        run: |
          export DB_URL="${{ secrets.DB_URL }}"
          mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
